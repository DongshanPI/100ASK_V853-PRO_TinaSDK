From f10a6afb41ae9f7527af7a0aeeb0aa035c094949 Mon Sep 17 00:00:00 2001
From: junsenhuang <junsenhuang@allwinnertech.com>
Date: Tue, 20 Aug 2019 19:13:55 +0800
Subject: [PATCH 11/11] wayland: fix display position not correct.

Change-Id: I111ed8a224c87099b78fd8a2b74fcb5f75909007
---
 ext/wayland/gstwaylandsink.c | 18 ++++++++++++++----
 ext/wayland/wlwindow.c       | 36 +++++++++++++++++++++++-------------
 ext/wayland/wlwindow.h       |  3 +++
 3 files changed, 40 insertions(+), 17 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index aa31e8c..d4d1ad9 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -500,10 +500,20 @@ gst_wayland_sink_find_display (GstWaylandSink * sink)
         /* if the application didn't set a display, let's create it ourselves */
         GST_OBJECT_LOCK (sink);
         sink->display = gst_wl_display_new (sink->display_name, &error);
-		sink->display->position_x = sink->position_x;
-		sink->display->position_y = sink->position_y;
-		sink->display->out_width = sink->out_width;
-		sink->display->out_height = sink->out_height;
+        sink->display->position_x = sink->position_x < 0 ? 0:sink->position_x;
+        sink->display->position_y = sink->position_y < 0 ? 0:sink->position_y;
+        sink->display->out_width  = sink->out_width;
+        sink->display->out_height = sink->out_height;
+
+        if(sink->out_width  <= 0 || sink->out_width  > WL_WINDOW_MAX_WIDTH)
+            sink->display->out_width  = WL_WINDOW_MAX_WIDTH;
+        if(sink->out_height <= 0 || sink->out_height > WL_WINDOW_MAX_HEIGHT)
+            sink->display->out_height = WL_WINDOW_MAX_HEIGHT;
+
+        GST_DEBUG_OBJECT (sink, "gst_wayland_sink_find_display,sink->position_x %d ,"
+            "sink->position_y %d,out_width (%d -> %d),out_height (%d -> %d)",
+            sink->position_x, sink->position_y, sink->out_width, sink->display->out_width,sink->out_height,sink->display->out_height);
+
 		/* set flip and hflip */
 		if (sink->out_vflip)
 			sink->display->out_transform = WAYLAND_OUT_TRANSFORM_FLIPPED_180;
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 1ca8f30..b0cccc1 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -259,12 +259,17 @@ gst_wl_window_resize_video_surface (GstWlWindow * window, gboolean commit)
     wp_viewport_set_destination (window->video_viewport, res.w, res.h);
   } else {
     gst_video_sink_center_rect (src, dst, &res, FALSE);
-	if (out_width > 0 && out_height > 0) {
-		res.x = position_x;
-		res.y = position_y;
-		res.w = out_width;
-		res.h = out_height;
-	}
+
+    if(out_width  <= 0 || out_width > WL_WINDOW_MAX_WIDTH)
+        out_width  = WL_WINDOW_MAX_WIDTH;
+    if(out_height <= 0 || out_height > WL_WINDOW_MAX_HEIGHT)
+        out_height = WL_WINDOW_MAX_HEIGHT;
+
+    res.x = position_x;
+    res.y = position_y;
+    res.w = out_width;
+    res.h = out_height;
+
   }
 
   wl_subsurface_set_position (window->video_subsurface, res.x, res.y);
@@ -403,14 +408,19 @@ gst_wl_window_set_render_rectangle (GstWlWindow * window, gint x, gint y,
   g_return_if_fail (window != NULL);
   gint position_x = window->display->position_x;
   gint position_y = window->display->position_y;
-  gint out_width = window->display->out_width;
+  gint out_width  = window->display->out_width;
   gint out_height = window->display->out_height;
-  if (out_width > 0 && out_height > 0) {
-		x = position_x;
-		y = position_y;
-		w = out_width;
-		h = out_height;
-  }
+
+  if(out_width  <= 0 || out_width  > WL_WINDOW_MAX_WIDTH)
+    out_width  = WL_WINDOW_MAX_WIDTH;
+  if(out_height <= 0 || out_height > WL_WINDOW_MAX_HEIGHT)
+    out_height = WL_WINDOW_MAX_HEIGHT;
+
+  x = position_x < 0 ? 0:position_x;
+  y = position_y < 0 ? 0:position_y;
+  w = out_width;
+  h = out_height;
+
   window->render_rectangle.x = x;
   window->render_rectangle.y = y;
   window->render_rectangle.w = w;
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index e247b4e..8637573 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -34,6 +34,9 @@ G_BEGIN_DECLS
 #define GST_IS_WL_WINDOW_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GST_TYPE_WL_WINDOW))
 #define GST_WL_WINDOW_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GST_TYPE_WL_WINDOW, GstWlWindowClass))
 
+#define WL_WINDOW_MAX_WIDTH  1024
+#define WL_WINDOW_MAX_HEIGHT  600
+
 typedef struct _GstWlWindow GstWlWindow;
 typedef struct _GstWlWindowClass GstWlWindowClass;
 
-- 
1.9.1

