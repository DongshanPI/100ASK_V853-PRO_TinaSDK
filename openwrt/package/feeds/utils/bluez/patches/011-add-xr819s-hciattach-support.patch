From 07773646966f9de428f20c80e93eda725fba71c7 Mon Sep 17 00:00:00 2001
From: caizepeng <caizepeng@allwinnertech.com>
Date: Mon, 9 Aug 2021 17:08:10 +0800
Subject: [PATCH] add xr819s hciattach support

Signed-off-by: caizepeng <caizepeng@allwinnertech.com>
---
 tools/hciattach.c        |  31 ++++++-
 tools/hciattach_xradio.c | 191 +++++++++++++++++++--------------------
 2 files changed, 121 insertions(+), 101 deletions(-)

diff --git a/tools/hciattach.c b/tools/hciattach.c
index d1da7f4..48be0fd 100644
--- a/tools/hciattach.c
+++ b/tools/hciattach.c
@@ -51,6 +51,10 @@
 
 #include "hciattach.h"
 
+#ifndef XRADIO_VENDOR_VERSION
+#define XRADIO_VENDOR_VERSION "1.0.3.B"
+#endif
+
 struct uart_t {
 	char *type;
 	int  m_id;
@@ -279,9 +283,14 @@ static int bcm43xx(int fd, struct uart_t *u, struct termios *ti)
 	return bcm43xx_init(fd, u->init_speed, u->speed, ti, u->bdaddr);
 }
 
-static int xradio(int fd, struct uart_t *u, struct termios *ti)
+static int xradio_xr829(int fd, struct uart_t *u, struct termios *ti)
+{
+	return xradio_xr829_init(fd, u->init_speed, u->speed, ti, u->bdaddr);
+}
+
+static int xradio_xr819s(int fd, struct uart_t *u, struct termios *ti)
 {
-	return xradio_init(fd, u->init_speed, u->speed, ti, u->bdaddr);
+	return xradio_xr819s_init(fd, u->init_speed, u->speed, ti, u->bdaddr);
 }
 
 static int read_check(int fd, void *buf, int count)
@@ -1096,8 +1105,15 @@ struct uart_t uart[] = {
 	{ "bcm43xx",    0x0000, 0x0000, HCI_UART_H4,   115200, 3000000,
 				FLOW_CTL, DISABLE_PM, NULL, bcm43xx, NULL  },
 
-	{ "xradio",0x0000, 0x0000, HCI_UART_H4,   115200, 1500000,
-	0, DISABLE_PM, NULL, xradio, NULL},
+	/* Xradio XR829 */
+	{ "xradio",    0x0000, 0x0000, HCI_UART_H4,   115200, 1500000,
+				0, DISABLE_PM, NULL, xradio_xr829, NULL  },
+
+	{ "xr829",    0x0000, 0x0000, HCI_UART_H4,   115200, 1500000,
+				0, DISABLE_PM, NULL, xradio_xr829, NULL },
+
+	{ "xr819s",    0x0000, 0x0000, HCI_UART_H4,   115200, 1500000,
+				0, DISABLE_PM, NULL, xradio_xr819s, NULL },
 
 	{ "ath3k",    0x0000, 0x0000, HCI_UART_ATH3K, 115200, 115200,
 			FLOW_CTL, DISABLE_PM, NULL, ath3k_ps, ath3k_pm  },
@@ -1250,6 +1266,7 @@ static void usage(void)
 			" <tty> <type | id> [speed] [flow|noflow]"
 			" [sleep|nosleep] [bdaddr]\n");
 	printf("\thciattach -l\n");
+	printf("\thciattach -v\n");
 }
 
 int main(int argc, char *argv[])
@@ -1269,7 +1286,7 @@ int main(int argc, char *argv[])
 	printpid = 0;
 	raw = 0;
 
-	while ((opt=getopt(argc, argv, "bnpt:s:lr")) != EOF) {
+	while ((opt=getopt(argc, argv, "bnpt:s:lrv")) != EOF) {
 		switch(opt) {
 		case 'b':
 			send_break = 1;
@@ -1302,6 +1319,10 @@ int main(int argc, char *argv[])
 			raw = 1;
 			break;
 
+		case 'v':
+			printf("%s\n", XRADIO_VENDOR_VERSION);
+			exit(0);
+
 		default:
 			usage();
 			exit(1);
diff --git a/tools/hciattach_xradio.c b/tools/hciattach_xradio.c
index 02bfaae..ec2c4ab 100644
--- a/tools/hciattach_xradio.c
+++ b/tools/hciattach_xradio.c
@@ -44,18 +44,41 @@
 
 #include "hciattach.h"
 
-#ifndef BT_FW_PATH_NAME
-#define BT_FW_PATH_NAME "/lib/firmware/fw_xr829_bt.bin"
-#endif
+#include <stdarg.h>
+
+static unsigned int g_dump_debug = 1;
+
+enum xradio_chip_type{
+	XR829 = 0,
+	XR819S = 1,
+};
+
+typedef struct {
+	uint32_t id;
+	const char *name;
+	const char *fw_name;
+	uint32_t addr_load;
+	uint32_t addr_run;
+	uint32_t second_junp;
+	uint32_t addr_sdd;
+	uint32_t start_wait;
+	uint32_t port_num;
+	uint32_t hciup_flag;
+	uint32_t startup_reset_flag;
+	uint32_t update_hcirate_flag;
+	uint32_t flowctrl;
+	uint32_t bdaddr_flag;
+} detection_cfg_t;
+
+static detection_cfg_t detection_cfg[] = {
+	[XR829] = {XR829,  "xr829",  "/lib/firmware/fw_xr829_bt.bin",  0x0, 	 0x0,	   0x0, 0x0, 0x0, 1, 1, 1, 1, 1, 1},
+	[XR819S] ={XR819S, "xr819s", "/lib/firmware/fw_xr819s_bt.bin", 0x201000, 0x201101, 0x0, 0x0, 0x0, 1, 1, 1, 0, 0, 1},
+};
 
 #ifndef XR_BT_CONF_PATH_NAME
 #define XR_BT_CONF_PATH_NAME "/etc/bluetooth/xr_bt.conf"
 #endif
 
-#ifndef ADDR_MGT_BT_PATH_NAME
-#define ADDR_MGT_BT_PATH_NAME "/sys/class/addr_mgt/addr_bt"
-#endif
-
 #define UNUSED(x)	(void)(x)
 
 #define SHOW_LOG		0
@@ -82,7 +105,7 @@
     (h)->checksum = cs; \
     } while(0)
 
-#define NO_SYNC_MAX_CNT 0xF
+#define NO_SYNC_MAX_CNT		(0xF)
 #define UART_BUF_RXCLEAR	(1<<0)
 #define	UART_BUF_TXCLEAR	(1<<1)
 
@@ -361,16 +384,6 @@ static char *lpm_state[] = {
 	"asserted"
 };
 
-static unsigned int g_chip_name = 1;			/* 1:AW1722	2:AW1732 */
-static unsigned int g_load_addr = 0x0000;
-static unsigned int g_jump_addr = 0x0000;
-static unsigned int g_port_num = 1;
-static unsigned int g_dump_debug = 1;
-static unsigned int g_hciup_flag = 1;
-static unsigned int g_startup_reset_flag =1;
-static unsigned int g_update_hcirate_flag = 1;
-static unsigned int g_bdaddr_flag = 1;
-
 static unsigned char g_trans_buf[1024];
 
 static unsigned char hci_reset[] = { 0x01, 0x03, 0x0c, 0x00 };
@@ -526,22 +539,22 @@ static int upio_set_bluetooth_power(int on);
 
 void brom_no_sync_workaround()
 {
-    static uint32_t no_sync_cnt = 0;
-    no_sync_cnt++;
-    if(no_sync_cnt <= NO_SYNC_MAX_CNT)
-        return ;
+	static uint32_t no_sync_cnt = 0;
+	no_sync_cnt++;
+	if (no_sync_cnt <= NO_SYNC_MAX_CNT)
+		return ;
 	no_sync_cnt = 0;
-    if (upio_set_bluetooth_power(UPIO_BT_POWER_OFF))
-    {
-        printf("bt power off fail\n");
-    }
-    usleep(500000);
-    if (upio_set_bluetooth_power(UPIO_BT_POWER_ON))
-    {
-        printf("bt power on fail\n");
-    }
-    usleep(20000);
-    printf("workaround for no sync done \n");
+	if (upio_set_bluetooth_power(UPIO_BT_POWER_OFF))
+	{
+		printf("bt power off fail.\n");
+	}
+	usleep(500000);
+	if (upio_set_bluetooth_power(UPIO_BT_POWER_ON))
+	{
+		printf("bt power on fail.\n");
+	}
+	usleep(500000);
+	printf("workaround for no sync done.\n");
 }
 
 static int userial_sync(int fd)
@@ -570,7 +583,7 @@ static int userial_sync(int fd)
 		ret = read(fd, ackbuf, 2);
 		printf("[%s] read buf: %02x %02x.\n", __FUNCTION__, ackbuf[0], ackbuf[1]);
 		if (ret < 0) {
-            brom_no_sync_workaround();
+			brom_no_sync_workaround();
 			if (errno == EAGAIN)
 				continue;
 		}
@@ -579,10 +592,10 @@ static int userial_sync(int fd)
 			printf("[%s] Receive %s, uart sync done.\n", __FUNCTION__, ackbuf);
 			break;
 		}
-        else
-        {
-            brom_no_sync_workaround();
-        }
+		else
+		{
+			brom_no_sync_workaround();
+		}
 	} while (1);
 
 	flags &= ~(O_NONBLOCK);
@@ -761,16 +774,6 @@ static void xradio_hci_send_cmd(int fd, unsigned char *buf, int len)
  */
 static int check_bdaddr_valid(unsigned char *buf)
 {
-	int i = 0;
-	unsigned char null_mac_addr[6] = {0, 0, 0, 0, 0, 0};
-	unsigned char read_mac_addr[6] = {0};
-	for(i = 0; i < 6; i++ ) {
-		read_mac_addr[i] = buf[i+7];
-	}
-	if (!memcmp(read_mac_addr, null_mac_addr, 6)) {
-		printf("bdaddr is null, not valid\n");
-		return 0;
-	}
 	if (buf[9] == 0x9e && buf[8] == 0x8b
 			&& (buf[7] & ~(0x3f)) == 0) {
 		printf("bdaddr is not valid\n");
@@ -789,26 +792,10 @@ static int xradio_generate_bdaddr(unsigned char *buf)
 	int fd;
 	FILE* conf_fd = NULL;
 	unsigned mac_hex;
-	int i; /* from MSB to LSB*/
-	int addr_bt_fd;
-	bdaddr_t bdaddr;
-	char addr_bt[18] = {'\0'};
-
-	addr_bt_fd = open(ADDR_MGT_BT_PATH_NAME, O_RDWR);
-	if (addr_bt_fd) {
-		read(addr_bt_fd, addr_bt, sizeof(addr_bt) - 1);
-		str2ba(addr_bt, &bdaddr);
-		for (i = 12; i >= 7; i--) {
-			buf[i] = bdaddr.b[i-7];
-		}
-		close(addr_bt_fd);
-		if (check_bdaddr_valid(buf))
-			return 0;
-	}
+	int i = 12; /* from MSB to LSB*/
 
 	conf_fd = fopen(XR_BT_CONF_PATH_NAME, "r");
 	if(conf_fd) {
-		i = 12;
 		fscanf(conf_fd, "%x", &mac_hex);
 		while (!feof(conf_fd)) {
 			buf[i--] = mac_hex;
@@ -1466,21 +1453,23 @@ static int com_set_pc(int fd, unsigned int pc)
 	return 0;
 }
 
-static int load_btfirmware(int fd)
+static int load_btfirmware(int type, int fd)
 {
 	FILE* fwfile_fd = NULL;
 	unsigned int filesize, len;
 	unsigned char *data = NULL;
-	unsigned int addr = g_load_addr;
+	unsigned int addr = detection_cfg[type].addr_load;
 	unsigned char flag_value[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 
 	printf("[%s] start loading firmware...\n", __FUNCTION__);
 
-	fwfile_fd = fopen(BT_FW_PATH_NAME, "rb");
-	if(!fwfile_fd)
+	fwfile_fd = fopen(detection_cfg[type].fw_name, "rb");
+	if(!fwfile_fd) {
+		printf("[%s] open firmware file failed.\n", __FUNCTION__);
 		return -1;
+	}
 
-	printf("[%s] open firmware file success.\n", __FUNCTION__);
+	printf("[%s] open firmware file success. loading...\n", __FUNCTION__);
 
 	fseek(fwfile_fd, 0, SEEK_END);
 	filesize = ftell(fwfile_fd);
@@ -1489,11 +1478,10 @@ static int load_btfirmware(int fd)
 	len = len > SZ_1K ? SZ_1K : len;
 	data = (unsigned char*)malloc(len);
 	if (data == NULL) {
-      printf("failed to alloc %d byte memory\n", len);
-      fclose(fwfile_fd);
-      return -1;
+		printf("failed to alloc %d byte memory\n", len);
+		fclose(fwfile_fd);
+		return -1;
 	}
-
 	do {
 		len = filesize;
 		len = (len > SZ_1K) ? SZ_1K : len;
@@ -1501,27 +1489,25 @@ static int load_btfirmware(int fd)
 		com_stream_write(fd, addr, len, data);
 		addr += len;
 		filesize -= len;
-		//printf("remain len:\t0x%04X.\n", filesize);
+		//printf("remain len:\t0x%04X.\n", filesize);
 	} while(filesize);
 	free(data);
 	fclose(fwfile_fd);
 	printf("load firmware done.\n");
-
 	/* jump */
 	printf("jump:\n");
-	com_set_pc(fd, g_jump_addr);
-
-	if(g_chip_name == 2)
+	com_set_pc(fd, detection_cfg[type].addr_run);
+	if(detection_cfg[type].second_junp)
 	{
 		printf("\nsecond time sync starting....\n");
 		if(userial_sync(fd) < 0)
 			return -1;
-		com_set_pc(fd, g_jump_addr);
+		com_set_pc(fd, detection_cfg[type].addr_run);
 	}
 	return addr;
 }
 
-int xradio_init(int fd, int def_speed, int speed, struct termios *ti,
+static int xradio_init(int type, int fd, int def_speed, int speed, struct termios *ti,
 		const char *bdaddr)
 {
 	printf("xradio_init\n");
@@ -1531,7 +1517,7 @@ int xradio_init(int fd, int def_speed, int speed, struct termios *ti,
 
 	if (upio_set_bluetooth_power(UPIO_BT_POWER_OFF))
 		return -1;
-	usleep(20000);
+	usleep(200000);
 
 	if (upio_set_bluetooth_power(UPIO_BT_POWER_ON))
 		return -1;
@@ -1540,7 +1526,7 @@ int xradio_init(int fd, int def_speed, int speed, struct termios *ti,
 	upio_init();
 	upio_set_btwake(LPM_BT_WAKE_POLARITY);
 	upio_set(UPIO_LPM_MODE, UPIO_DEASSERT, 0);
-	usleep(5000);
+	usleep(20000);
 
 	if (userial_sync(fd))
 		return -1;
@@ -1548,39 +1534,52 @@ int xradio_init(int fd, int def_speed, int speed, struct termios *ti,
 	if (com_sync_baudrate(fd, speed, speed | (3 << 24)))
 		return -1;
 
-	if (load_btfirmware(fd) < 0)
+	if (load_btfirmware(type, fd) < 0)
 		return -1;
-
-	usleep(5000);
+	usleep(5000);
 
 	userial_vendor_set_baud(fd, def_speed);
-	usleep(10000);
-	userial_vendor_set_hw_fctrl(fd, 1);
-	usleep(10000);
+	usleep(10000);
+	userial_vendor_set_hw_fctrl(fd, detection_cfg[type].flowctrl);
+	usleep(10000);
 
-	if (g_startup_reset_flag) {
+	if (detection_cfg[type].startup_reset_flag) {
 		printf("[%s] send reset cmd...\n", __FUNCTION__);
 		proc_reset(fd);
 	}
 
-	if (g_update_hcirate_flag) {
+	if (detection_cfg[type].update_hcirate_flag) {
 		printf("[%s] update hci baudrate...\n", __FUNCTION__);
 		proc_baudrate(fd, speed);
 	}
 
-	if (g_bdaddr_flag) {
+	if (detection_cfg[type].bdaddr_flag) {
 		printf("[%s] set bdaddr...\n", __FUNCTION__);
 		proc_bdaddr(fd);
 		proc_reset(fd);
 	}
 
-	if (g_hciup_flag) {
+	if (detection_cfg[type].hciup_flag) {
 		printf("[%s] bring up hci...\n", __FUNCTION__);
 		proc_enable_hci(fd);
 	}
 
-#ifdef CONFIG_XR829_BT_LPM
-    upio_set(UPIO_LPM_MODE, UPIO_ASSERT, 0);
-#endif
 	return 0;
 }
+
+int xradio_xr829_init(int fd, int def_speed, int speed, struct termios *ti,
+		const char *bdaddr)
+{
+	xradio_init(XR829, fd, def_speed, speed, ti, bdaddr);
+
+	return 0;
+}
+
+int xradio_xr819s_init(int fd, int def_speed, int speed, struct termios *ti,
+		const char *bdaddr)
+{
+	xradio_init(XR819S, fd, def_speed, speed, ti, bdaddr);
+
+	return 0;
+}
+
-- 
2.29.0

